Transmission Control Protocol (TCP)

---------------------------------------
* TỔNG QUAN

The Transmission Control Protocol (TCP) là một trong những giao thức chính của gói giao thức Internet (Internet protocol suite). Nó khởi nguồn từ một gói bổ trợ cho IP (Internet Protocol) và sau đó được tách ra riêng ra khỏi IP. Bởi vậy, toàn bộ gói này (TCP trên IP) thường được gọi là TCP/IP. TCP cung cấp khả năng truyền nhận một dòng byte một cách đáng tin cậy, có thứ tự  và được kiểm lỗi giữa các host sử dụng liên lạc với nhau qua mạng IP.

TCP cung cấp dịch vụ thông tin nằm ở mức trung gian giữa tầng ứng dụng (application layer) và IP. Nó cho khả năng liên lạc host-to-host ở tầng giao vận (transport layer) của mô hình Internet. Một chương trình không cần biết các cơ chế cụ thể của việc truyền hận tin dựa vào một nối kết cụ thể, ví dụ như vậy phân mảnh IP (IP fragementation) để phù hợp với đơn vị truyền tối đa (maximum transmission unit - MTU) của một nối kết. Ở tầng giao vận, TCP đảm nhiệm việc thực hiện handshake và các chi tiết truyền nhận, cung cấp cho các chương trình một interface trù tượng hóa của liên kết mạng (thường là socket interface).

Ở các tầng thấp hơn của stack protocol, bởi vì các yếu tố như sự tắc nghẽn mạch, balance tải lưu thông và sự khó đoán của hành vi mạng, các gói IP có thể bị mất, bị lặp hay bị giao sai thứ tự. TCP phát hiện và sử lí các vấn đề này: yêu cầu truyền lại đối với gói tin mất, xắp xếp lại theo thứ tự các gói tin và thập chí còn có cơ chế giảm tốc độ truyền để tránh nghẽn mạng. Với các dữ liệu gửi đi mà không nhận được, bên gửi sẽ được thông báo. Một khi TCP bên nhận đã tổng hợp đủ dữ liệu, nó sẽ chuyển tiếp dữ liệu đó cho ứng dụng tầng trên. TCP đã trù tượng hóa đi các chi tiết mạng cụ thể của tầng bên dưới.

IP chịu trách nhiệm cho việc truyền gửi gói tin. Còn TCP chỉ quan tâm tới các segment - đơn vị thông tin truyền gửi mà dữ liệu được chia nhỏ thành nhằm giúp truyền đi hiệu quả trong mạng. Lấy ví dụ, khi môt file HTML được gửi đi từ một server, chương trình TCP của server sẽ chia nhỏ file thành các segment và chuyển tiếp chúng xuống tầng internet trong network stack. Tần internet sẽ bao các segment này lại và tạo ra các gói IP bằng cách thêm một phần header vào trước mỗi segment (header này có chứa địa chỉ IP người nhận). Khi mà TCP bên nhận đã lấy được các segment này (sau khi đã nhận được từ tầng internet bên nhận), nó sẽ xếp lại các segment và đảm bảo rằng không có lỗi xảy ra rồi chuyển file HTML này tới chương trình bên nhận.

Bởi vì việc truyền nhận trong nhiều mạng là không đáng tin, TCP đạt được các tính chất của mình nhờ vào việc sử dụng kĩ thuật xác nhận với truyền lại. Kĩ thuật này đòi hỏi người nhận phải phản hồi xác nhận khi mà nó nhận được các dữ liệu. Người gửi sẽ giữ một danh sách các gói đã gửi và một timer để đếm thời gian từ lúc gửi cho tới hiện tại, các gói tin không nhận được xác nhận sau một khoảng thời gian nhất định sẽ được bên gửi truyền lại. Ở đây timer là cần thiết để tránh trường hợp mất hay hư gói tin.

TCP được tối ưu để gửi thông tin chính xác chứ không gửi thông tin đúng lúc. Việc sử dụng TCP có thể tạo ra các khoảng delay tương đối lâu (trong khoảng vài giây) bởi việc đợi truyền lại gói tin hay đợi các gói tin sai thứ tự. Điều này có thể không phù hợp với các ứng dụng nhạy thời gian, lúc này UDP có thể được dùng nếu.

TCP là giao thức dựa vào nối kêt (connection-oriented) - có nghĩa là bên gửi và bên nhận phải thiết lập một nối kết trước khi dữ liệu có thể được truyền (nối kết ở đây có thể hiểu là sự đồng ý truyền dữ liệu từ hai bên). Trong trường hợp server-client, bên server phải đang ở trạng thái nghe (passive open) để có thể đón được yêu cầu kết nối từ client trước khi một nối kêt có thể được thiết lập.

TCP là một giao thức phức tạp. Dù các chỉnh sửa và nâng cấp đã được ứng dụng trong những năm qua, hoạt động cơ bản nhất của TCP vẫn không thay đổi đáng kể so với đặc tả đầu tiên của nó trong RFC 675, và đặc tả v4 trong RFC 793. Danh sách 8 đặc tả bắt buộc và hơn 20 thay đổi được khuyến nghị cao đã được liệt kê trong RFC 7414. Trong danh sách nó có RFC 2581, TCP Congestion Control (Kiểm soát nghẽn TCP), một trong những RFC về TCP quan trọng nhất trong những năm gần đây.

Tập trung chủ yếu của tài liệu này được nhắm vào cấu trúc của segment TCP và việc đóng gói, giải mã segment TCP. Các chức năng khác (congestion control, flow control,...), mặc dù vô cùng quan trọng sẽ bị lướt qua. Phiên bản miêu tả trong tài liệu này sẽ phần nhiều lấy từ RFC 793, với các thay đổi nêu lên trong các RFC sau được ghi chú và thêm vào khi thích hợp (khi các thay đổi này phù hợp với tập trung của tài liệu). 

---------------------------------------
* CẤU TRÚC GÓI TIN

 0                   1                   2                   3
 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|          Source Port          |       Destination Port        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                        Sequence Number                        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Acknowledgment Number                      |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  Data |           |U|A|P|R|S|F|                               |
| Offset| Reserved  |R|C|S|S|Y|I|            Window             |
|       |           |G|K|H|T|N|N|                               |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|           Checksum            |         Urgent Pointer        |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                    Options                    |    Padding    |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|                             data                              |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

Một TCP segment sẽ bao gồm phần header và phần data. Phần header chứa 10 trường bắt buộc và một trường Options tùy chọn. Phần data sẽ đi sau header và là thông tin muốn gửi đi. Độ dài của phần data không có trường riêng để miêu tả  mà sẽ được tính ra bằng cách trừ độ dài header TCP và header IP ra khỏi tổng độ dài gói tin IP (độ dài gói IP này sẽ được ghi trong header IP). Header TCP phải có độ dài là bội số của 32 bit, nếu không đủ, phần sau header đó sẽ được chèn vào các bit 0 để tạo đủ bội số.

-Source Port: 16 bit 
Là số cổng bên gửi

-Destination Port: 16 bit
Là số cổng bên nhận

-Sequence Number: 32 bit
Là số thứ tự của byte data đầu tiên trong segment này. Trừ khi SYN (miêu tả bên dưới) được sử dụng, lúc này trường này được hiểu là sequence number ban đầu (initial sequence number - ISN) (được dùng lúc và hai bên gửi và nhận thiết lập nối kết) và byte data đầu tiên sẽ có số thứ tự ISN+1.

-Acknowledgement Number: 32 bit
Nếu ACK (ở dưới) được sử dụng thì trường này được hiểu là giá trị sequence number tiếp theo mà người gửi gói tin đang mong đợi sẽ nhận được từ bên kia, và cũng có nghĩa là bên gửi gói tin xác nhận việc nhận được tất cả mọi data với sequence number trước giá trị này.

-Data Offset: 4 bit
Độ dài của phần header, tính bằng số word (nhóm 32 bit) phải offset kể từ đầu segment để có thể đến được phần data (bởi vậy mới gọi là data offset).

-Reserved+Control Bíts: 12 bit
Trong đặc tả RFC 793, Reserved sẽ có độ dài 6 bit, tiếp sau đó Control Bits sẽ chiếm 6 bit còn lại với các bit từ trái sang phải lần lượt đại diện cho các flag:
   +URG: Chỉ trường URG Pointer quan trọng - Ít dùng và thường bị implement sai (khuyên không dùng bởi RFC 6093)
   +ACK: Chỉ trường Acknowledgement Number quan trọng
   +PSH: Hành động push - tin nhắn cho TCP stack báo hãy gửi phần dữ liệu này lên cho ứng dụng ngay
   +RST: Reset lại kết nối.
   +SYN: Dùng trong việc thiết lập nối kết ban đầu, đồng bộ hóa sequence number giữa hai bên gửi nhận
   +FIN: Kết thúc nối kết.
Trong RFC 3168, hỗ trợ  cho ECN (Explicit Congestion Notification - Thông báo nghẽn rõ ràng) được thêm vào trong cấu trúc segment bằng việc thêm 3 bit control. Các hệ thống sử dụng ứng dụng RFC này sẽ có phần Reserved giảm còn 3 bit và Control Bits sẽ dài 9 bit (3 bit thêm vào bên trái 6 bit cũ). Từ trái sang phải các bit thêm này là NS, CWR, ECE. Ta sẽ không áp dụng thay đổi này và giữ nguyên cấu trúc RFC 793, chủ yếu là vì ta sẽ không hiện thực các chức năng liên quan.

-Window: 16 bit
Số byte dữ liệu (tính từ giá trị sequence number đã được xác nhận gần nhất) mà bên gửi có thể nhận.

-Checksum: 16 bit
Tính toán tương tự như checksum UDP. Sẽ có một trường pseudo header có kích thước hệt như vậy. Trường Protocol trong pseudo header mang giá trị 6. Trường UDP Length thay bằng TCP Length, là độ dài của TCP segment.

 0      7 8     15 16    23 24    31
+--------+--------+--------+--------+
|           Source Address          |
+--------+--------+--------+--------+
|         Destination Address       |
+--------+--------+--------+--------+
|  zero  |  PTCL  |    TCP Length   |
+--------+--------+--------+--------+

-Urgent Pointer: 16 bit
Sẽ không dùng, nhưng đọc được. Chỉ có ý nghĩa khi bit URG được set.

-Options: Thay đổi độ dài được (0-320 bit)
Độ dài của trường này sẽ được tính từ trường Data Offset. Sẽ là một chuỗi danh sách các option đặc biệt được dùng để thay đổi hoạt động của TCP một cách đáng kể. Không có thứ tự đặt sẵn cho các option, các option có thể xuất hiện theo bất kì thứ tự nào hợp lí. 
Mỗi option bao gồm 3 bộ phận, ghi theo đúng thứ tự: Option-Kind (8 bit), Option-Length (8 bit), Option-Data (độ dài tùy option). Option-Kind chỉ loại option. Option-Length chỉ độ dài của toàn bộ option (cả ba mục), tính theo byte. Option-Data chứa dữ liệu liên quan nếu có.
Một số trường chỉ có thể được dùng khi SYNC được set (được đánh dấu * ở bảng dưới).

+---------+---------+----------+----------------------------------------------+
| Option- | Option- | Option-  | Mục đích                                     |
| Kind    | Length  | Data     |                                              |
+=========+=========+==========+==============================================+
| 0       | Không   | Không    | Đánh dấu hết danh sách option                |
+---------+---------+----------+----------------------------------------------+
| 1       | Không   | Không    | Dùng để đệm giữa các option để tròn 32 bit    |
|         |         |          | Có thể tăng tốc độ ở một số kiến trúc máy      |
+---------+---------+----------+----------------------------------------------+
| 2*      | 4       | SS       | Kích cỡ segment tối đa                       |
+---------+---------+----------+----------------------------------------------+
| 3*      | 3       | S        | Window scale                                 |
+---------+---------+----------+----------------------------------------------+
| 4*      | 2       | Không    | Cho phép dùng Selective Acknowledgement      |
+---------+---------+----------+----------------------------------------------+
| 5       | N(10,   | BBBB,    | Selective Acknowledgement                    |
|         | 18, 26, | EEEE,... |                                              |
|         | 34)     |          |                                              |
+---------+---------+----------+----------------------------------------------+
| 8       | 10      | TTTT,    | Mã thời gian lúc gửi và mã thời gian nhận    |
|         |         | EEEE     | được gần đây nhất                            |
+---------+---------+----------+----------------------------------------------+

Để biết thêm về chức năng của các option 2, 3, 4, 5, 8, xem phần "Một số điểm bổ sung" ở dưới.
Ví dụ : 
   +Option-Kind 1 chỉ dùng để đệm, không có ý nghĩa đặc biệt nên không có Option-Length và Option-Data. 
   +Option-Kind 2 sẽ có độ dài là 4 byte (2 byte dùng miêu tả kích cỡ  segment tối đa).

-Padding: Độ dài thay đổi. Chỉ là các bit 0.

---------------------------------------
* HOẠT ĐỘNG CỦA GIAO THỨC

Phần này không cần thiết lắm với việc đóng gói và giải mã, nên tui miêu tả sơ sài. Sẽ bổ sung thêm.

Hoạt động của TCP có thể chia thành 3 giai đoạn chính. 
   +Thiết lập kết nối: Là một quá trình handshake nhiều bước nhằm thiết lập kết nối trước khi đi vào giao đoạn truyền tin.
   +Truyền tin: Nằm ngoài phạm vi yêu cầu, hầu hết các chức năng flow control, congestion control sẽ diễn ra ở đây.
   +Kêt thúc: Đóng kết nối và giải phóng các tài nguyên được dùng trong kết nối.
   
-THIẾT LẬP KẾT NỐI:
Trước khi thiết lập kết nối với server, bên server phải mở một cổng TCP và nghe từ cổng đó (passive  open) yêu cầu kết nối của client. Một client có thể thiết lập kết nối (active open) với một server đang nghe yêu cầu qua quá trình 3-way (hay 3 bước) handshake.

   1. SYN: Client sẽ gửi một gói SYN (bit SYN được set) tới cho server. Client sẽ đặt Sequence Number gửi đi thành một giá trị ngẫu nhiên A.
   2. SYN+ACK: Server sẽ phản hồi bằng việc gửi lại một gói tin SYN+ACK (bit SYN và ACK được set). Trường Acknowledgment Number sẽ được đặt A+1, Sequence Number gửi đi thành một giá trị ngẫu nhiên B.
   3. ACK: Cuối cùng, client phản hồi bằng một gói ACK về cho server. Trường Acknowledgment Number sẽ được đặt A+1, Sequence Number đặt là B+1.

Bước 1 và 2 thiết lập và xác nhận sequence number theo một hướng (server xác nhận sequence number của client). Bước 2 và 3 thiết lập và xác nhận theo hướng ngược lại. Sau khi hoàn thành các bước này, một kết nối full-duplex đã được thiết lập.

-KẾT THÚC KẾT NỐI:
https://commons.wikimedia.org/wiki/File:TCP_CLOSE.svg#/media/File:TCP_CLOSE.svg
(coi hình dễ hơn - tui làm biếng vẽ vào trong này)

Quá trình kết thúc kết nối dùng four-way handshake, trong đó mỗi bên của kết nối sẽ ngừng kết nối một cách độc lập. Khi một bên muốn dừng kết nối, có sẽ truyền đi một gói tin FIN. Gói tin này sẽ được bên còn lại xác nhận với một gói ACK. Bởi vậy khi muốn dừng kết nối từ cả hai bên, sẽ có 2 cặp FIN-ACK được gửi đi. Sau khi bên gửi gói FIN ban đầu đã gửi gói ACK cuối cùng, nó sẽ đợi một khoảng thời gian trước khi đóng kết nối. Trong khoảng thời gian đợi đó cổng TCP không thể tạo kết nối mới: đảm bảo rằng các gói tin đến trễ từ kết nối cũ sẽ không bị nhầm với gói từ kết nối mới.

---------------------------------------
* MỘT SỐ ĐIỂM BỔ SUNG

-PHƯƠNG THỨC PHÁT HIỆN MẤT GÓI TIN:

TCP dùng một số đánh dấu (gọi là sequence number) để xác định mỗi byte dữ liệu. Số đánh dấu này sẽ dùng để xác định thứ tự byte để các gói tin có thể được xếp lại theo đúng thứ tự. Số đánh dấu của byte đầu tiên từ hai bên gửi và nhận được mỗi bên tự chọn và được gửi trong gói tin SYN đầu tiên. Giá trị đầu tiên này có thể tùy chọn, và nên khó đoán để tránh khả năng bị đoán ra và lợi dụng để chiếm đoạt kết nối.

Các gói tin ACK được gửi bởi bên nhận để báo với bên gửi rằng dữ liệu đẫ nhận được cho đến một byte nào đó.

Tính đáng tin cậy của TCP bắt nguồn từ việc bên gửi sẽ biết được phần dữ liệu bị mất và gửi lại nó. TCP dùng hai kĩ thuật đơn giản để xác định dữ liệu mất. Quá thời gian truyền lại (Retransmission timeout - RTO) và ACK lặp (DupAcks).

    +RTO: Khi bên gửi truyền đi một gói tin, nó sẽ bắt đầu đếm ngược thời gian từ  giá trị xấp xỉ thời gian mà gói tin sẽ được xác nhận. Nếu đã quá thời gian này mà vẫn không nhận được xác nhận, gói tin sẽ được truyền lại, lần này với xấp xỉ thời gian xác nhận mới.
    +DupAcks: Nếu một gói tin trong một chuỗi các gói tin (ví dụ số 100) bị mất, bên nhận sẽ không thể gửi gói ACK với giá trị quá 100 được. Bởi vậy bên nhận sẽ gửi lại gói ACK với giá trị 99 (ý nói rằng đã nhận không lỗi được tới gói 99), kể cả khi nó nhận được các gói tin 101, 102,...Sự lặp lại các gói ACK cùng giá trị này sẽ báo hiệu với bên gửi rằng đã mất gói tin. Bên gửi sau khi nhận được tới một số lượng nhất định các gói ACK lặp này sẽ hiểu là gói 100 đã bị mất và gửi lại gói này. Ngoài ra một số trường hợp còn áp dụng Selective Acknowledgement để báo hiệu rõ rằng về các gói tin đã được nhận.

-FLOW CONTROL:

TCP áp dụng flow control (có thê hiểu là kiểm soát tốc độ gửi) để tránh việc bên gửi sẽ gửi quá nhiều dữ liệu quá nhanh để bên nhận có thể bắt được và xử lí kịp thời. Sự tồn tại của cơ chế flow control là thiết yếu trong môi trường mà nhiều máy với tốc độ xử lí khác nhau dùng sử dụng mạng để liên lạc (ví dụ máy tính để bàn đang gửi dữ liệu cho một chiếc smartphone, chiếc điện thoại này phải có các để kiềm chế dòng dữ liệu để không bị quá tải. 

Trường Window của gói tin TCP phục vụ cho mục đích này. Trong mỗi một gói TCP, người gửi (ví dụ điện thoại) sẽ gửi đi trong trường Window số lượng byte còn lại mà nó có thể dùng để buffer cho các gói tin mới. Bên còn lại (ví dụ máy tính) chỉ có thể gửi đi đúng lượng dữ liệu đó, trước khi nó phải dừng lại để đợi xác nhận và cập nhật giá trị window mới từ điện thoại.

-MAXIMUM SEGMENT SIZE:

Maximum segment size (kích cỡ gói tin tối đa) là giá trị byte lớn nhất của một gói tin mà mỗi bên sẵn sàng nhận. Để đạt được hiệu năng tối đa MSS nên được chọn đủ nhỏ để tránh hiện tượng phân mảnh IP (IP fragmetation). Giá trị này được chọn bởi mỗi bên và truyền đi tới bên còn lại khi thiết lập kết nối (dùng option MSS).

MSS là một giá trị độc lập với giá trị trong trường . MSS chỉ giới hạn độ dài tối đa của một gói tin, còn trường Window chỉ giới hạn tạm thời của khả năng xử lí gói tin mỗi bên. 

-SELECTIVE ACKNOWLEDGEMENT:

Việc phụ thuộc chỉ vào việc dò ACK lặp của giao thức TCP gốc có thể dẫn đến sự thiếu hiệu quả khi có nhiều gói tin bị mất. Ví dụ, cho rằng các byte đánh số 1000 đến 10999 được gửi trong 10 gói TCP kích cỡ bằng nhau, mà gói thứ 2 (chứa byte 2000 đến 2999) bị mất. Nếu chỉ dùng việc dò ACK lặp, bên nhận chỉ có thể gửi đi giá trị ACK 2000 (ý chỉ rằng đã nhận được đến byte 1999), và không thể xác nhận rằng nó đã nhận thành công các byte 3000 đến 10999. Bởi vậy nên bên gửi có thể phải gửi lại hết phần dữ liệu bắt đầu từ byte 2000.

Để giảm nhẹ vấn đề này, TCP còn sử dụng thêm SACK (Selective ACK) option. SACK cho phép bên nhận báo hiệu rằng có tồn tại các khối không liên tục các gới tin được được nhận thành công. Ta có thể dùng một số lượng nhất định các khối SACK này, với mỗi khỗi được giới hạn bởi rìa trái (số đánh dấu đầu tiên của khối) và rìa phải (số đánh dấu tiếp sau số của byte cuối cùng của khối) để xác nhận một cách chọn lọc khối các gói tin. Trở lai trường hợp ví dụ trên, bên nhận bây giờ có thể gửi một gói ACK 2000 chứa option SACK 3000->11000. Bên gửi sau khi nhận được gói tin đã có đủ thông tin để xác nhận chỉ có gói tin thứ 2 bị mất, và sẽ chỉ truyền lại gói tin với số byte 2000 đến 2999.

Việc sử dụng SACK là không bắt buộc, và chỉ có thể được sử dụng khi hai bên đồng ý dùng. Việc xác nhận từ hai bên này sẽ được thực hiện khi thiết lập kết nối (dùng option để báo hiệu cho phép dùng SACK).

-WINDOW SCALE:

Trong các ứng dụng mạng băng thông cao, giá trị window lớn có thể là một yêu cầu quan trọng. Mặt khác, do giới hạn số lượng bit dùng cho trường, giá trị  TCP window tối đa là 65535 byte. Và bởi vì không thể mở rộng độ lớn của trường, một hệ số mở rộng được sử dụng. 

Option Window scale được dùng để phục vụ chức năng tăng kích cỡ tối đa của trường window. Nó sẽ mang giá trị số lượng bit dịch trái của trường window, giá trị sau phép dịch trái bit này sẽ được hiểu là giá trị window mở rộng. Nói cách khác, giá trị window mở rộng = giá trị window ban đầu * 2^(giá trị option window scale). 

Option Window scale này chỉ có thể dùng khi hai bên thiết lập giao thức. Mỗi bên phải gửi đi giá trị window scale của mình trong bước này.

-TIMESTAMP:

TCP timestamp option có thể được dùng để xác định thức tự mà các gói tin được gửi đi. TCP timestamp thường sẽ không chính xác với đồng hồ trên từng hệ thống mà bắt đầu từ một giá trị ngẫu nhiên nào đó.

Có hai trường nhỏ trong option này: 4 byte giá trị timestamp của người gửi (của bên A) và 4 byte giá trị timestamp nhận được gần đây nhất từ bên còn lại (bên B).

Có khả năng xảy ra trường hợp số đánh dấu (sequence number), một giá trị 32 bit, sau một hồi sử dụng sẽ bị dùng hết và lặp lại giá trị số đánh dấu của byte đầu tiên. Để tránh bị nhầm lẫn hai gói tin có phần bị trùng số đánh dấu, timestamp có thể được dùng.



---------------------------------------
*TÀI LIỆU THAM KHẢO
https://en.wikipedia.org/wiki/Transmission_Control_Protocol
https://www.rfc-editor.org/rfc/rfc793
https://www.rfc-editor.org/rfc/rfc7414



